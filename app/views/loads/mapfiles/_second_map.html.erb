<div id="floating-panel">
    <b>Mode of Travel: </b>
    <select id="mode">
      <option value="DRIVING">Driving</option>
      <option value="WALKING">Walking</option>
      <option value="BICYCLING">Bicycling</option>
      <option value="TRANSIT">Transit</option>
    </select>
    </div>
   <div id="map-canvas-second" style="width: 400px; height: 300px;"></div>
    <script>
      function initMap() {
        var directionsDisplay = new google.maps.DirectionsRenderer;
        var directionsService = new google.maps.DirectionsService;
        var map2 = new google.maps.Map(document.getElementById('map-canvas-second'), {
          zoom: 14,
          center: {lat: 37.77, lng: -122.447}
        });
        directionsDisplay.setMap(map2);

        calculateAndDisplayRoute(directionsService, directionsDisplay);
        document.getElementById('mode').addEventListener('change', function() {
          calculateAndDisplayRoute(directionsService, directionsDisplay);
        });
      }

      function calculateAndDisplayRoute(directionsService, directionsDisplay) {
        var selectedMode = "DRIVING"
        directionsService.route({
          origin: {lat: 37.77, lng: -122.447},  // Haight.
          destination: {lat: 37.768, lng: -122.511},  // Ocean Beach.
          // Note that Javascript allows us to access the constant
          // using square brackets and a string value as its
          // "property."
          travelMode: google.maps.TravelMode[selectedMode]
        }, function(response, status) {
          if (status == 'OK') {
            directionsDisplay.setDirections(response);
          } else {
            window.alert('Directions request failed due to ' + status);
          }
        });
      }
    </script>
    
    
    
    
    
    
        <script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyClVHG9mw29C0oVkJDlH-QtkLnucCICkV8&callback=initMap">
    </script>
 

   

    <div id="right-panel">
      <div id="inputs">
        <pre>

        </pre>
      </div>
      <div>
        <strong>Results</strong>
      </div>
      <div id="output"></div>
    </div>
   <div id="map-canvas-first" style="width: 400px; height: 300px;"></div>
    <script>
      function initMap() {
        var bounds = new google.maps.LatLngBounds;
        var markersArray = [];
        var directionsService = new google.maps.DirectionsService;
        var origin1 = {lat: <%= @driver_checkins.last.latitude %>, lng: <%= @driver_checkins.last.longitude %>};
        var origin2 = {lat: <%= @load_origin_address.latitude %>, lng: <%= @load_origin_address.longitude %>};
        var destinationA = {lat: <%= @load_destination_address.latitude %>, lng: <%= @load_destination_address.longitude %>};
        var destinationB = {lat: <%= @load_destination_address.latitude %>, lng: <%= @load_destination_address.longitude %>};

        var destinationIcon = 'https://chart.googleapis.com/chart?' +
            'chst=d_map_pin_letter&chld=D|FF0000|000000';
        var originIcon = '<%= image_path('green.png')%>'; 
        var map = new google.maps.Map(document.getElementById('map-canvas-first'), {
          center: {lat: 41.850033, lng: -87.6500523},
          zoom: 10
        });
        var geocoder = new google.maps.Geocoder;

        var service = new google.maps.DistanceMatrixService;
        service.getDistanceMatrix({
          origins: [origin1, origin2],
          destinations: [destinationA, destinationB],
          travelMode: 'DRIVING',
          unitSystem: google.maps.UnitSystem.METRIC,
          avoidHighways: false,
          avoidTolls: false
        }, function(response, status) {
          if (status !== 'OK') {
            alert('Error was: ' + status);
          } else {
            var originList = response.originAddresses;
            var destinationList = response.destinationAddresses;
            var outputDiv = document.getElementById('output');
            outputDiv.innerHTML = '';
            deleteMarkers(markersArray);

            var showGeocodedAddressOnMap = function(asDestination) {
              var icon = asDestination ? destinationIcon : originIcon;
              return function(results, status) {
                if (status === 'OK') {
                  map.fitBounds(bounds.extend(results[0].geometry.location));
                  markersArray.push(new google.maps.Marker({
                    map: map,
                    position: results[0].geometry.location,
                    icon: icon
                  }));
                } else {
                  alert('Geocode was not successful due to: ' + status);
                }
              };
            };

            for (var i = 0; i < originList.length; i++) {
              var results = response.rows[i].elements;
              geocoder.geocode({'address': originList[i]},
                  showGeocodedAddressOnMap(false));
              for (var j = 0; j < results.length; j++) {
                geocoder.geocode({'address': destinationList[j]},
                    showGeocodedAddressOnMap(true));
                outputDiv.innerHTML += originList[i] + ' to ' + destinationList[j] +
                    ': ' + results[j].distance.text + ' in ' +
                    results[j].duration.text + '<br>';
              }
            }
          }
        });
      }

      function deleteMarkers(markersArray) {
        for (var i = 0; i < markersArray.length; i++) {
          markersArray[i].setMap(null);
        }
        markersArray = [];
      }
    </script>



<%= @load_origin_address.origin_address %>
 
<p>Distance <%= @distance.to_i %></p>  
<p>@load_origin_address.latitud <%= @load_origin_address.latitude %></p>
<p>@load_origin_address.longitude <%= @load_origin_address.longitude %></p>
<p>@load_destination_address.latitude <%= @load_destination_address.latitude %></p>
<p>@load_destination_address.longitude <%= @load_destination_address.longitude %></p>






  
